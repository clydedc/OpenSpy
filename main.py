import requests
import json
import time
import os, sys
import phonenumbers
from phonenumbers import geocoder 
from phonenumbers import carrier
import whois
from consolemenu import ConsoleMenu
from consolemenu.items import FunctionItem
from bs4 import BeautifulSoup
from colorama import *
from pystyle import *
from phonenumbers import *
from googleapiclient.discovery import build

API_KEY = ""
CSE_ID = ""

try:
    os.system("cls || clear")
    print(Fore.GREEN, "[+] Veuillez d√©finir le temps des r√©sultat qui seront affich√© --> ", Style.RESET_ALL, end='')
    clock_time = int(input())
except Exception as e:
    print(f"Erreur : {e}")
    sys.exit(1)


def main():
    """
    Menu principal de l'application.
    """
    menu = ConsoleMenu("Menu principal üîç | OpenSpy ")
    item_ip = FunctionItem("Recherche IP", rechercher_ip)
    item_phone = FunctionItem("Recherche num√©ro de t√©l√©phone", phone_number)
    item_dns = FunctionItem("Recherche DNS", dns_lookup)
    item_allintext = FunctionItem("Recherche allintext", lambda: effectuer_recherche(input("Entrez votre requ√™te allintext: ")))
    item_whois = FunctionItem("Recherche WHOIS", rechercher_whois)
    item_theme = FunctionItem("Changer le th√®me", lambda: change_theme(menu))
    menu.append_item(item_ip)
    menu.append_item(item_phone)
    menu.append_item(item_allintext)
    menu.append_item(item_dns)
    menu.append_item(item_whois)
    menu.append_item(item_theme)
    menu.show()


def recherche_allintext(query):
    """
    Effectue une recherche Google avec le param√®tre allintext en utilisant l'API Google Custom Search.
    """
    try:
        service = build("customsearch", "v1", developerKey=API_KEY)
        res = service.cse().list(q=f"allintext:{query}", cx=CSE_ID).execute()

        if "items" in res:
            time.sleep(clock_time)
            return res["items"]
        else:
            print("üîç | Aucun r√©sultat trouv√©.")
            time.sleep(clock_time)
            return []

    except Exception as e:
        print(f"‚ùå | Une erreur s'est produite lors de la recherche : {e}")
        time.sleep(clock_time)
        return []


def change_theme(menu):
    """
    Fonction pour changer le th√®me de l'application.
    """
    themes_file_path = os.path.join(os.path.dirname(__file__), 'themes.json')
    
    with open(themes_file_path, 'r') as f:
        themes = json.load(f)["themes"]

    print("üîç | Th√®mes disponibles :")
    for idx, theme in enumerate(themes):
        print(f"#{idx} - {theme['name']}")

    try:
        choix = int(input("Choisissez un th√®me (num√©ro) : "))
        if 0 <= choix < len(themes):
            theme_choisi = themes[choix]
            print(f"\nüîç | Th√®me s√©lectionn√© : {theme_choisi['name']}")
            print("üîç | Application du th√®me...")
            menu.title = f"Menu principal üîç | OpenSpy | {theme_choisi['name']}"
            if 'background_color' in theme_choisi:
                os.system(f"echo -e '\033]11;{theme_choisi['background_color']}\007'")
            if 'text_color' in theme_choisi:
                os.system(f"echo -e '\033]10;{theme_choisi['text_color']}\007'")
            print(f"Th√®me {theme_choisi['name']} appliqu√© avec succ√®s !")
        else:
            print("‚ùå | Th√®me invalide.")
    except ValueError:
        print("‚ùå | Th√®me invalide.")


def enregistrer_resultats(results):
    """
    Enregistre les r√©sultats dans un fichier JSON.
    """
    if not os.path.exists("save"):
        os.makedirs("save")
    timestamp = int(time.time())
    file_path = f"save/results_{timestamp}.json"
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=4)
    print(f"üîç | Les r√©sultats ont √©t√© enregistr√©s dans le fichier : {file_path}")


def analyser_resultats(results):
    """
    Analyse et reformate les r√©sultats obtenus depuis l'API Google Custom Search.
    """
    formatted_results = []
    for result in results:
        title = result.get("title", "Titre non trouv√©")
        url = result.get("link", "Lien non trouv√©")
        snippet = result.get("snippet", "Extrait non trouv√©")
        formatted_results.append({
            "title": title.strip(),
            "url": url.strip(),
            "snippet": snippet.strip()
        })
        time.sleep(clock_time)
    return formatted_results


def effectuer_recherche(query):
    """
    Effectue la recherche Google et affiche les r√©sultats.
    """
    results = recherche_allintext(query)
    formatted_results = analyser_resultats(results)
    if formatted_results:
        print("\nüîç | R√©sultats de la recherche :")
        for idx, result in enumerate(formatted_results, start=1):
            print(f"#{idx}")
            print(f"   ‚û°Ô∏è Titre : {result['title']}")
            print(f"   ‚û°Ô∏è Lien : {result['url']}")
            print(f"   ‚û°Ô∏è Extrait : {result['snippet']}\n")
        choix = input("Voulez-vous enregistrer ces r√©sultats dans un fichier ? (oui/non) : ").strip().lower()
        if choix == "oui":
            enregistrer_resultats(formatted_results)
            time.sleep(clock_time)
    else:
        print("üîç | Aucun r√©sultat trouv√©.")


def rechercher_ip():
    ip = input("Entrez l'adresse IP √† rechercher : ")
    print(f"Recherche d'informations sur l'adresse IP {ip}...\n")

    url = f"http://ipinfo.io/{ip}/json"
    try:
        response = requests.get(url)
        data = response.json()

        print(f"üîç | OpenSpy | Adresse IP: {data.get('ip')}")
        print(f"üîç | OpenSpy | Ville: {data.get('city')}")
        print(f"üîç | OpenSpy | R√©gion: {data.get('region')}")
        print(f"üîç | OpenSpy | Pays: {data.get('country')}")
        print(f"üîç | OpenSpy | Organisation: {data.get('org')}")
        print(f"üîç | OpenSpy | Localisation: {data.get('loc')}")
        print(f"üîç | OpenSpy | Code postal: {data.get('postal')}")
        print(f"üîç | OpenSpy | Hostname: {data.get('hostname')}")
        print(f"‚è∞ |¬†OpenSpy | Le r√©sultat se supprimera au bout du temps d√©termin√© choisi. ")
        time.sleep(clock_time)
    except requests.exceptions.RequestException as e:
        print(f"üîç | OpenSpy | [LOGüî¥] Erreur lors de la r√©cup√©ration des informations : {e}")

    input("üîç | OpenSpy | [LOGüü¢] Appuyez sur Entr√©e pour revenir au menu...")


def rechercher_whois():
    domain = input("Entrez le nom de domaine √† rechercher : ")
    print(f"Recherche d'informations WHOIS pour le domaine {domain}...\n")

    try:
        w = whois.whois(domain)
        print(f"üîç | OpenSpy | Domaine: {w.domain_name}")
        print(f"üîç | OpenSpy | Registre: {w.registrar}")
        print(f"üîç | OpenSpy | Date de cr√©ation: {w.creation_date}")
        print(f"üîç | OpenSpy | Date d'expiration: {w.expiration_date}")
        print(f"üîç | OpenSpy | Serveurs de noms: {w.name_servers}")
        print(f"‚è∞ |¬†OpenSpy | Le r√©sultat se supprimera au bout du temps d√©termin√© choisi. ")
        time.sleep(clock_time)
    except Exception as e:
        print(f"üîç | OpenSpy | [LOGüî¥] Erreur lors de la r√©cup√©ration des informations WHOIS : {e}")

    input("üîç | OpenSpy | [LOGüü¢] Appuyez sur Entr√©e pour revenir au menu...")


def phone_number():
    try:
        """
        Fonction pour rechercher des informations sur un num√©ro de t√©l√©phone.
        """
        number = input("Entrez le num√©ro de t√©l√©phone : ")
        parsed_number = phonenumbers.parse(number, "FR")
        operator_name = carrier.name_for_number(parsed_number, 'fr')
        print(f"üîç | OpenSpy | Op√©rateur : {operator_name}")
        print(f"üîç | OpenSpy | Indicatif pays : {parsed_number.country_code}")
        print(f"üîç | OpenSpy | Num√©ro national : {parsed_number.national_number}")
        print(f"üîç | OpenSpy | R√©gion : {geocoder.description_for_number(parsed_number, 'fr')}")
        print(f"üîç | OpenSpy | Possibilit√© de num√©ro valide : {phonenumbers.is_possible_number(parsed_number)}")
        print(f"üîç | OpenSpy | Type de num√©ro : {phonenumbers.number_type(parsed_number)}")
        print(f"üîç | OpenSpy | Possibilit√© de num√©ro valide : {phonenumbers.is_possible_number(parsed_number)}")
        print(f"üîç | OpenSpy | Valide : {phonenumbers.is_valid_number(parsed_number)}")
        print(f"‚è∞ | OpenSpy | Le r√©sultat se supprimera au bout du temps d√©termin√© choisi. ")
        time.sleep(clock_time)
    except phonenumbers.NumberParseException as e:
        print(f"üîç | OpenSpy | [LOGüî¥] Erreur lors de l'analyse du num√©ro : {e}")
        input("üîç | OpenSpy | [LOGüü¢] Appuyez sur Entr√©e pour revenir au menu...")


def dns_lookup():
    """
    Effectue une recherche DNS pour un domaine donn√©.
    """
    domain = input("Entrez le domaine √† rechercher : ")
    print(f"Recherche DNS pour le domaine {domain}...\n")
    url = f"https://dns.google/query?name={domain}&type=A"
    try:
        response = requests.get(url)
        data = response.json()
        print(f"üîç | OpenSpy | R√©sultats de la recherche DNS pour le domaine {domain} :")
        for record in data.get("Answer", []):
            print(f"üîç | OpenSpy | Type : {record['type']}")
            print(f"üîç | OpenSpy | Nom : {record['name']}")
            print(f"üîç | OpenSpy | TTL : {record['TTL']}")
            print(f"üîç | OpenSpy | Donn√©es : {record['data']}\n")
        print(f"‚è∞ |¬†OpenSpy | Le r√©sultat se supprimera au bout du temps d√©termin√© choisi. ")
        time.sleep(clock_time)
    except requests.exceptions.RequestException as e:
        print(f"üîç | OpenSpy | [LOGüî¥] Erreur lors de la r√©cup√©ration des informations DNS : {e}")
        input("üîç | OpenSpy | [LOGüü¢] Appuyez sur Entr√©e pour revenir au menu...")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        Write.Print("\nAu revoir üñêÔ∏è", Colors.red_to_white)
        sys.exit(1)
